/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

// The workbox.core module will be imported automatically.
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Precache all the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
registerRoute(
  ({ request, url }) => {
    // If this is an HTML request and not for any other domain,
    // return the HTML shell. Otherwise, pass.
    if (request.mode === 'navigate' && url.origin === self.location.origin) {
      return true;
    }
    return false;
  },
  new StaleWhileRevalidate({
    cacheName: 'app-shell',
  })
);

// An example route to cache assets from a CDN.
// registerRoute(
//   new RegExp('https://your-cdn.com/.*'),
//   new StaleWhileRevalidate({
//     cacheName: 'cdn-assets',
//   })
// );

// This allows the web app to trigger skipWaiting via
// `self.skipWaiting()` within the service worker lifecycle.
// To learn more, see https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
